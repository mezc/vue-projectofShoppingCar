1.v-bind 是单向数据绑定，简写 ”:“,v-model是双向数据绑定

v-if ,v-show

v-if=""
如果为true，相当于appendChild
false：相当于removeChild

v-show:
true:oDiv.style.display = "block
false:oDiv.style.display = "none"

v-on:原生js的事件名=”逻辑“
v-on:原生js事件名=“方法名”，该方法必须在methods
简写：@

v-bind:xxx=''
v-bind：标签中原生属性
v-bind:自定义属性

v-model 只能应用在表单控件 ui控件中

2.webpack安装在开发环境下:cnpm i webpack@3 --save-dev

3.webpack:
//1.执行webpack时识别webpack.config.js
//2.使用其他文件名，更改脚本
scripts:{
    "dev":"webpack --config ./webpack.dev.config.js"
}
//3.css-loader:
cnpm i css-loader style-loader -D
//4.处理图片的loader
cnpm i url-loader file-loader -D
//处理图片时，设置合理的limit很有必要
limit小于图片大小时，显示的是url 
//5.less-loader:
cnpm i less-loader less -D
//6.配置dist
在config.js中，具体见 05less-loader/webpack.dev.config.jss
//7.html-webpack-plugin:
cnpm i html-webpack-plugin@2 -D
参照物里的index.html自动打包到dist里，并且在html中不用导入build.js
//8.webpack-dev-server:
webpack-dev-server:
--open 自动打开浏览器
--hot 热更新，不在刷新的情况下替换css样式
--inline 自动刷新
--port 9999 指定端口
--process 显示编译进度
//在package.json文件中配置：
"scripts":{
    "dev":"webpack-dev-server --open --hot --inline --config ./webpack.dev.config.js",
    "pro":"webpack --config ./webpack.pro.config.js"
}
//npm run dev 
//9es6解析
cnpm i babel-core babel-loader@7 panel-preset-env babel-plugin-transform-runtime -D
//在webpack-dev-config.js文件中配置：
loader:{
    //处理es6，7，8
    test:/\.js$/,
    loader:"babel-loader",
    options:{
        presets:["env"],
        plugins:["transform-runtime"]
    }
}
//10解析.vue的loader：
cnpm i vue-loader@14 vue-template-compiler@2 -D
//配置vue文件：
{
    test:/\.vue$/,
    loader:"vue-loader"
}
//main.js:
new Vue({
    el:"#app",
    render:c=>c(App)
})


4.$emit $on 必须绑定一个公共的是实例，才能够触发。
新建
//公有vue实例
var Event = new Vue();

5.vue-cli,需要安装全局
cnpm i -g vue-cli

//拉取vue-cli 2,全局安装桥接工具
cnpm i -g @vue/cli-init
//vue-cli@2:

//vue init 模版名 项目名
//vue init webpack my-project


//vue-cli 支持的模块有：
webpack,webpack-simple,browserify,browserify-simple,pwa,simple

6.vue-cli相关文件介绍：
//build文件夹：里面对webpack开发和打包的相关配置，包括入口文件，输出文件，使用的模块

//config文件夹：指定开发和打包的静态资源，要压缩的文件类型，开发使用的端口号，开发使用虚拟服务器跨域请求api

//.editorconfig:代码规范文件，规定使用空格/tab缩进，缩进长度是两位四位的代码风格

//src
//main.js:整个项目的入口文件
//App.vue:入口组件
//router:路由模块
//components:公有组件
//assets:放置每个组件的静态资源|（static放置的是公有静态资源）

//router/index.js:
//此时的router是局部对象，必须使用Vue.use(Router),就可以在任意的组件中使用this.$router,this.$route

//设置顺序
//1新建是有组件文件夹
//1.1创建只有组件
//2router/index.js下配置路由
//3App.vue入口组件中配置

//config/index.js:整个文件的配置入口

//build/webpack.base.conf.js
//处理后缀名：
//resolve:{
    extensions:[
        ".js",".vue",".json"//以这几个后缀名可以省略不写
    ],
    alias:{//以一个别名代表一个路径
        "vue$":"vue/dist/vue.esm.js",
        "@":resolve("src")
    }
}


---------------------------------------------------------------

webpack-dev-server@2.9.1
webpack@3.4.1 


6.npm cnpm
安装cnpm:   npm install cnpm -g -registry

1.全局安装
npm i webpack -g
npm install  webpack@3.4.1  -g
版本4.x.x有问题
npm i webpack webpack-cli --save-dev

2.安装jquery
npm init -y
npm i jquery -S,这一步完成后生成了node_modules文件夹

3.
"scripts": {
    "dev":"webpack --mode development",
    "build":"webpack --mode production"
  },
  运行npm run build/ npm run dev

4.新建webpack.config.js 配置文件，设置 modules.exports={
    entry:path.join(__dirname,"相对路径"),//输出
    output:{
        path:path.join(__dirname,"相对路径")
        filename:"boundle.js"//输入
    }
}

5.
//cnpm i webpack-dev-server@2.9.1 -D 实现自动打包编译功能
//本地安装的依赖不能在命令行直接运行，需在package.json里scripts配置
//"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "dev":"webpack-dev-server"
  },
//要求在本地安装webpack,命令为cnpm i webpack -D
npm install webpack@3.4.1 -D

//使用时用npm run dev,  html中js引用路径改成根路径，<script src="/boundle.js">

//webpack-dev-server自动打包生成的boundle.js文件并没有放到实际的物理磁盘上，而是直接托管到电脑内存中，所以在项目根目录中根本找不到打包好的boundle.js,存放目录与src,node_modules平级看不见的文件。
//通过服务器访问由webpack-dev-server的js包地址是：localhost:8080/boundle.js

7.不手动点击localhost:8080配置：
package.json 里配置：
"dev":"webpack-dev-server --open --port 3000 --contentBase src --hot"//手动打开浏览器//端口更改为3000//内容的根路径更改为src,意思是/localhost:3000/src,//--hot热重载，热更新，减少代码的更新,实现网页不重载就能局部刷新

8.配置dev-server的第二种方式，这种方式要麻烦些,

在webpack.config.js中配置：
第1步：
defServer:{
  open:true,//自动打开浏览器
  port:3000,//设置启动时候运行端口
  contentBase:"src",//指定托管的根目录
  hot:true//启用热更新
} 

第2步：
const webpack = require("webpack")

第3步：//new一个热更新的模块对象
plugins:[
  new webpack.HotModuleReplacemnetPlugin()
]

第4步：
package.json里；
"scripts":{
  "dev2":webpack-dev-server --open --port 3000 --contentBase src --hot,
  "dev":"webpack-dev-server"
}

第5步：
npm run dev

9.将页面放入内存中,安装插件
cnpm i html-webpack-plugin -D

//配置文件：
plugins:[new htmlWebpackPlugin({
template:path.join(__dirname,".src/index.html"),
filename:"index.html"})]

10.loader-配置处理css文件loader
// 1.处理css文件，安装cnpm i style-loader css-loader -D
// 2.webpack.config.js里新增一个配置节点，module，这个module对象上有rules属性，是数组，这个数组中存放了第三方文件的匹配和处理规则。
//3.webpack处理顺序，从后往前调用

11.loader处理less文件
cnpm i less-loader -D
cnpm i less@2.3.1 -D

12.loader处理scss文件
cnpm i sass-loader -D
cnpm i node-sass -D


13.
//webpack可以处理css/less/scss,不能处理带有url地址的样式
cnpm i url-loader file-loader -D

//{test:/\.(jpg|png|gif|bmp|jpeg)$/,use:"url-loader"}//处理图片路径的loader

14.安装bootstrap,注意用3的版本
cpm i bootstrap@3 -D
//使用时,去掉--contentBase src
"dev":"web pack-dev-server --open --port 3000 --hot
//main.js中导入：import "bootstrap/dist/css/bootstrap.css"
//通过路径形式引入node_modules中相关文件，可直接省略路径前面的node_modules这一层目录，直接写包的名称。然后跟上具体的文件路径
//webpack.config.js中
{test:/\.(ttf|eot|svg|woff|woff2)$/,use:"url-loader"}

15.静态属性：可以直接通过类名直接访问的属性
//实例属性：只能通过类的实例来访问的属性

15.//webpack需要借助第三方loader把高级语法转为低级语法后把结果交给webpack打包到bundle.js中
//1.1在webpack中可以通过babel将高级语法转换为低级语法
//通过安装如下两套包，安装babel相关loader功能
//第一套包转换工具：cnpm i babel-core babel-loader@7 babel-plugin-transform-runtime -D
//第二套包语法：cnpm i babel-preset-env babel-preset-stage-0 -D
//默认安装版本时babel-loader@8 ,注意版本不一致会导致运行错误，解决方法，降低babel版本npm install -D babel-loader@7
//2.1webpack.config.js中module节点下，rules数组中添加一个新的匹配规则
{test:/\.js$/,use:"babel-loader",exclude:/node_modules/}
//在配置babel时，必须把node_modules目录通过exclude排除掉，否则会将node_modules中的所有js文件打包编译。
//3.1在项目根目录中，新建一个.babelrc的配置文件，属于json格式
//内容为：
{
"presets":["env","stage-0"],
"plugins":["transform-runtime"]}
//目前安装的babel-preset-env是比较新的语法，之前安装的是babel-preset-es2015，-env包含了所有和es***相关的语法。


16.使用vue
//安装：cnpm i vue -D
//调用main.js:import Vue from "vue"
//import Vue from "vue"中导入的是node_modules/vue/package.json/main属性
//要导入全的包，第一种方式：import Vue from "../node_modules/vue/dist/vue.js"
//第二种方式，在web pack.config.js中，resolve:{alias:{"vue$":"vue/dist/vue.js"}}

17.使用vue组件
//在src下创建login.vue(此时main.js中可以使用import Vue from "vue")
//login.vue分成3部分：
<template></template>,<script></script>,<style></style>
//1导入组件，在main.js:import login from "./login.vue"
//2安装相关loader打包.vue文件：cnpm i vue-loader@14 ,vue-template-compiler -D
//备注vue-loader版本问题：
为了引入.vue文件，安装完vue-loader和vue-template-compiler后，运行报错：

vue-loader was used without the corresponding plugin.Make sure to include VueLoaderPlugin in your webpack config.

百度了一下，是因为vue-loader，15的版本需要再添加plugin的配置。有两种解决方法：

1.把安装版本改为14的

2.在webpack.config.js中添加：

const { VueLoaderPlugin } = require('vue-loader')
 
module.exports = {
  // ...
  plugins: [
    new VueLoaderPlugin()
  ]
}
//3在配置文件webpack.config.js中新增loader{test:/\.vue$/,use:"vue-loader"} 
//4main.js中，render:function(createElement){
return createElement(login)}
//5在html中<login></login>
//6在webpack中，如果要通过vue把一个组件放到页面中展示，只能用render函数

18.render的改写：
// render:function(createElement){
    //     return createElement(login)
    // }//可以简写成下面的形式
    render:c=>c(login)
    //逻辑：1.改写成箭头函数： (createElement)=>{return createElement(login)}
    // 2.()里只有一个变量，可以去掉（），{}里只有一条函数，可以去掉{},不加{}默认为return，可以去掉return:
    // createElement=>createElement(login)
    // 3.变量名太长，改成c:c=>c(login)

19.在login.vue中定义组件的data和method：
<script>export default{
data(){return {}},
methods:{
show(){console.log("xxxx")}
}
}
</script>

20.//es6:使用import 模块名 from “模块标识符”
/在es6中使用export default和export向外暴露成员
//node中：使用var/const 名称 = require("模块标识符")
//node:使用module.exports 和exports 来暴露成员
//export default向外暴露的成员，可以使用任意变量来接收
//在一个模块中，export default只允许向外暴露一次
//export向外暴露成员，只能通过{}来接收
//export可以多次暴露成员
//export导出的成员，导出时必须严格使用导出时的名称使用{}来接收，可以使用as 来取别名

21.cnpm i 通过package.json安装，尽量不要复制node_modules

22.vue-router的使用
//1安装路由：cnpm i vue-router -D
//2main.js导入包：import VueRouter from "vue-router"
//3手动安装router：Vue.use(VueRouter)
//4创建路由对象：var router = new VueRouter({
routes:[
{path:"/account",component:account},
{path:"/goodslist",component:goodslist}
]
})
//5导入组件：
//import account from  "./main/Account.vue"
//import goods list from "./main/GoodList.vue"
//6
//app这个组件是通过vm的render函数渲染出来的，render如果要渲染组件，渲染出来的的组件只能放到el所指向的#app元素中；
//account/goodlist是由路由匹配监听到的，这两个组件只能放到属于路由的<router-view>/<router-link>中，不能放到el所指向的#app中，会被render函数的渲染清空，应放在app.vue中

19.图标提示包：vue 2 snippets,vetur

20.设置组件样式
//<style scoped>设置局部样式
//普通style标签只支持普通的样式，启用scss/less需要为style元素设置lang属性<style lang="scss">,div{font-style:italic}

21.抽离路由：
新建router.js,将导入组件，创建路由对象挪出,
//暴露路由对象export default router
//main.js接收路由:import router from "./router.js"

22.mint ui:
//安装cnpm i mint-ui -D
//引入全部组件：import Vue from "vue"，
//import MintUI from "mint-ui",
//导入样式
//import "mint-ui/lib/style.css"
//导入app组件
//import App from "./App.vue"
//安装mintui
//Vue.use(Mint)
//new Vue({
el:"#app",
components:{App}
})
//引入部分组件：import {Cell,Checklist} from "mini-ui"
//Vue.component(Cell.name,Cell)
//Vue.component(Checklist.name,Checklist)
//使用时，需配置.babelrc文件：
{
"presets":["env","stage-0"],
"plugins":["transform-runtime"]}
并在webpack.config.js中配置：
{test:/\.css$/,use:["style-loader","css-loader"]}

23.mint-ui中toast使用
//App.vue中
// Toast("点击出现提示信息")，调用toast后会有一个返回值，返回值有close方法，调用close方法，可以手动关闭
                this.toastInstance = Toast({
                    message:"设置提示内容",
                    position:"设置出现位置",
                    duration:-1,
                    iconClass:"glyphicon glyphicon-heart",//设置图标,用bootstrap,在main.js中导入图标,import "bootstrap/dist/css/bootstrap.css",打开bootstrap,将图标样式放在iconClass中，webpack.config.js中配置{test:/\.(ttf|eot|svg|woff|woff2)$/,use:"url-loader"}
                    className:'mytoast',//自定义toast的样式，需自己提供一个类名新建css文件夹/app.css,在main.js中导入import "./css/app.css"
})

24.//借助 cnpm i babel-plugin-component -D按需引入需要的组件，以达到减小项目体积的目的。
//.babelrc:
{
    "presets":["env","stage-0"],
    "plugins":[
        "transform-runtime",
        [
            "component",
            [
                {
                    "libraryName":"mint-ui",
                    "style":true
                }
            ]
        ]
    ]
}
//在main.js中引入组件和注册按钮：

25.使用mui：需要手动下载压缩包，不能npm安装
//拷贝dist到src/lib/mui中，放置的是手动安装的包
//mui-master/examples/hello-mui/examples/buttons.html,拷贝标签到 App.vue
//main.js引入mui，import "./lib/mui/css/mui.min.css"


26.使用局部样式：
style with scss (scoped)


27.版本管理工具
//1.根目录下创建.gitignore:忽略那些要上传的文件:
node_modules
.idea
.vscode
.git
//2.创建README.md:
用#
//3.开源项目的协议，mui-masters/LICENSE,放到根目录下
//4.创建新仓git init
//5git status
//6git add .
//7提交git commit -m "xxx"
//8新增git remote add origin githubadress
//9推送到远程git push -u origin master
//10全局设置：
git config --global user.name "...."
git config -- global user.email "...."
//11删除本地分支：git branch -d 分支名
//12删除远程分支：git push origin --delete devs
//13创建新分支并切换到新分支： git checkout -b 新分支名
//14创建新分支不切换到新分支：git branch 新分支名
//15.1.本地分支重命名 git branch -m oldBranchName newBranchName
//15.2.远程分支重命名:如果修改远程分支，只需要将本地分支重命名为新分支名称，然后删除远程分支，再把本地分支上传就可以了

28.mui图标，在example的icon里找，标签里的mui-icon 不能删除，引入样式：/css/icons-extra.css" ,font


29.mui-active,高亮
//配置高亮
//在router.js中：
linkActiveClass:"mui-active"//覆盖默认路由高亮的类

30.Promise:
// 1.Promise是一个构造函数，new Promise()得到一个Promise实例
// 2Promise上有resolve(成功之后的回调函数)，reject(失败之后的回调函数)
//3.Promise.Prototype.then(),只要是promise创建的实例，都可以访问到.then()方法,.then()预先指定了成功调用resolve函数和失败调用reject函数
// 4.Promise()表示一个异步操作，每new一个实例，这个实例就表示一个具体的异步操作
//5.异步的结果，成功和失败
//5.1执行成功，在内部调用resolve将结果返回给调用者
//5.2执行失败，在内部调用reject将结果返回
//5.3异步操作内部拿到结果后，不能用return，只能使用回调函数的形式将结果返回
//6.每new一个Promise实例，就会立即执行异步操作里的代码,如不要立即执行，则需创建function函数，调用时才会执行

//7.在上一个节点返回的promise,可以用继续使用.then()


31.时间格式化，
//安装时间插件：cnpm i moment -D
//导入时间插件：import moment from "moment"

32.在组件中引入子组件：

--------------------------------------------------

1.数据数组的操作：
//1.1数组的变异方法
不能用下标操作
push 末尾添加
pop 末尾删除
shift 行首删除
unshift 行首添加
splice 截取-----splice(下标，删除的条数，在当前位置 增加的内容)
sort 排序
reverse 取反
//1.2使用Vue.set(vm.msg,下标，变更的内容)
//1.3使用vm.$set(vm.msg,下标，变更的内容)

2.不想用div渲染，可以换成<template>包裹
3.更新字典数据，用Vue.set(vm.msg,"","")  或  vm.$set(vm.msg,"","")

4.h5编码规则，table>tbody,tbody里只能放tr
<tbody><tr is="component"></tr>/tobody>
<ul><li is="component"></li></ul>
<select><option is = "component"></option></select>

5.组件数据，要求是一个函数要有返回值，data(){return}或data:function(){
    return
}

6.获取dom节点，设置<div ref="refName"></div>，获取this.$refs.refName.inneHTML

7.父子组件传数据：父组件中设置参数，传递给子组件，子组件用props:[""]接收，子组件不能修改父组件中的参数，否则会报错。可以通过在子抓紧设置自己的data，data(){return {
    number
}},更改里面的数据

8.props特性
//8.1参数不会展示在dom标签中
//8.2可以在子组件中通过差值表达式获取参数的值
非props特性：
//8.3参数会显示在dom标签中
//8.4不能直接获取参数的值

9.监听原生事件用@click.native

10.非父子组件间的传值：
Vue.prototype.bus = new Vue()

11.vue作用域插槽
//11.1子组件用<slot></slot>封装
//11.2父组件用<template slot-scope="变量名">
{{变量名.参数}}
</template>

12.动态组件，vue自带：
<component :is></component>

13.动画效果原理:通过在dom上增加样式来实现
<transition name="fade"></transition>
//如果不写name，则默认为v-enter,v-enter-active
////出现
//第1针：创建fade-enter,fade-enter-active
//第2针，销毁fade-enter,创建fade-enter-to
//第3针，销毁fade-enter-active,销毁fade-enter-to 
////消失
//第1针：创建fade-leave,fade-leave-active
//第2针，销毁fade-leave,创建fade-leave-to
//第3针，销毁fade-leave-active,销毁fade-leave-to
.v-enter,.v-leave-to{
    opacity:0
}
.v-enter-active,.v-leave-active{
    transition:opacity 1s;
}

14.列表过渡：
<transition-group></transition-group>
+<style></style>

15.transition中的钩子函数：
<transition
        name="fade"
        @before-enter="handleBeforeEnter"
        @enter = "handleEnter"
        @after-enter="handleAfterEnter"
        >
methods:{
    handleBeforeEnter(el){},
    handleEnter(el,done){
        done()
    },
    handleAfterEnter(el){}
}

16.配置ssh
//16.1步骤1.检查是否已经存在SSH Key
ls -al ~/.ssh
//16.1.1 ssh-keygen -t rsa -C "your_email@example.com"
//16.1.2 pbcopy < ~/.ssh/id_rsa.pub 获得的SSH Key粘贴到
//16.2 打开GitLab, 登录->点击右上角的用户头像->点击settings->在settings里找到SSH的设置->点击“ADD SSH KEY”按钮添加->将已经获得的SSH Key粘贴到“Key”，标题可以随便取，这样就保持了本地与服务器端的联系.

17.创建项目
npm install --global vue-cli
vue init webpack my-project
cd my-project
npm install
npm run dev

18.样式依赖:stylus
cnpm i stylus -S
cnpm i stylus-loader -S

19./* 使用stlus样式:lang="stylus"，要使该样式只对class="header"作用的话，可加上scoped */

20.reset.css里面：
html {overflow-x: hidden;height: 100%;font-size: 50px;-webkit-tap-highlight-color: transparent;}
相对50px，1rem = html font-size = 50px，所以,43px =43 * 1/50px=43/50=0.86rem
,设计稿是两倍尺寸，所以代码里的像素要除以2，再除以50px=rem单位,或者两倍尺寸除以100px

21.定义全局css样式，并在stylus中使用
//在src/assets/style/新建varibles.styl
//样式里面引入样式要用@import
//“@” 代表src这个路径，如果在css中引入其他的css，又要使用@的话要变成："~@"

22.自定义路径代表符:
//22.1 build/webpack.base.conf.js/
//22.2 resolve:{
    alias:{
        "styles":resolve("src/assets/styles")
    }
}

23.企业级开发，不同功能创建不同分支

24.轮播图组件
https://github.com/surmon-china/vue-awesome-swiper
cnpm i vue-awesome-swiper@2.6.7 -S

25.全局使用vue-awesome-swiper,main.js
import Vue from 'vue'
import VueAwesomeSwiper from 'vue-awesome-swiper'

// require styles
import 'swiper/dist/css/swiper.css'

Vue.use(VueAwesomeSwiper, /* { default global options } */)

//图片地址
http://piao.qunar.com/touch/

26.将长字符串用省略号显示
ellipsis()
    overflow:hidden
    white-space:nowrap
    text-overflow:ellipsis


27.vue中发送ajax的方法：
vue-resource
axios(推荐使用)
//cnpm i axios -S
//axios使用:
//27.1import axios from "axios
//27.2使用生命周期函数mounted (){}
//27.2.1mounted (){
    this.getHomeInfo()
}
//static放置静态文件/mock文件夹/index.json,只有static里的内容能被外部访问到
//防止被提交到仓库，在.gitignore中添加static/mock
//在home.vue中写axios请求，可以传给每一个子组件

28.对api下json的请求转发到static/mock/xx.json下，使用vue中的proxy代理
//config文件夹/index.js文件
////dev:{
    proxyTable:{
        "/api":{
            target:"http://localhost:8080",
            pathRewrite:{
                //一旦请求是以api开头，转发到'/static/mock下'
                "^/api":"/static/mock"
            }
        }
    }
}

29.v-if="list.length",当list为空数组，length为0， v-if=“false”
30.页面跳转
<router-link></router-link>

31.解决列表区域不能拖动，引入第三方包，better-scroll
31.1 cnpm install better-scroll --save
31.2 使用参考文档：https://github.com//ustbhuangyi/better-scroll
31.3 使用better-scroll必须符合下列结构：
    <div>
        <ul>
            <li></li>
            <li></li>
            <li></li>
        </ul>
    </div>
31.4
    import BScroll from 'better-scroll'
    const wrapper = document.querySelector('.wrapper')
    const scroll = new BScroll(wrapper)//创建一个新BScroll的实例，接收一个dom元素（使用ref获取dom元素）

32.发送ajax的步骤
32.1在最外面的页面建立，import axios from "axios"
32.2 mounted(){
    this.getCityInfo()
}
33.大量数据的传递用vuex
33.1安装cnpm install vuex --save
33.2 创建store，src/store/index.js
【
    import Vue from "vue"
import Vuex from "vuex"
Vue.use(Vuex)
export default new Vuex.Store({
    state:{
        city:"北京"
    }
})
】
33.3 main.js里import
调用state，首先调用actions，再调用mutations
33.4
//state:储存公用数据
//mutations:储存同步数据的改变
//action:异步数据

34.webpack默认不支持通过ip访问，
在package.json里配置，
"scripts":{"dev":--host 0.0.0.0}
    ifconfig,获取inet本机ip -> 10.71.41.48
    输入10.71.41.48:8080访问

35.解决手机端不支持promise,解决白屏问题
    cnpm install babel-polyfill --save
    在main.js中,import 'babel-polyfill'

36.打包编译上线过程
    >命令行：npm run build -> 生成的dist文件夹，就是最终要上线的代码。
    >将dist里文件放在后端服务器的根目录下即可。
    >修改dist文件所放的路径：config - index.js - build:{assetsPublicPath:'/project'}
    则相应打开的路径为：localhost/project

37.dist详解：
    >static
        >css
        >js
            >app.js > 各个逻辑代码
            >manifest.js > 打包的配置文件
            >vendor.js > 各个组件公用的代码

38.vue知识点
    >vue-rooter
    >vuex
    >vue服务端渲染